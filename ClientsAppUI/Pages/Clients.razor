@using ClientsAppUI.Components
@using ClientsAppUI.Components.Clients
@using ClientsAppUI.Enums
@using ClientsDataAccessLib.DTOs.Clients
@using ClientsDataAccessLib.DTOs.Contacts
@using ClientsDataAccessLib.Exceptions
@using ClientsDataAccessLib.Services
@page "/Clients"
@inject IClientService clientService
@inject IContactService contactService
@inject IJSRuntime js

<PageTitle>Clients</PageTitle>

@* <h3>Clients</h3> *@

<div class="frame">
    <div class="left">
        <InfoCard Title="@Title" Description="@Description" LinkAddress="Contacts" LinkText="Manage Contacts"/>
    </div>
    <div class="right">
        <AddClient GetAllClients="@GetAllClients" />
    </div>
    <div class="bottom">
        <ClientList Clients="@clients" Contacts="@contacts" GetAllClients="@GetAllClients"/>
    </div>
</div>

@code {
    public string Title = "Manage Clients";

    public string Description = "Here you can view and manage all of you clients' information together with linked contact information.";

    public int PageNumber { get; set; } = 0;

    private IEnumerable<GetClientDTO>? clients { get; set; }
    private IEnumerable<GetContactDTO>? contacts { get; set; }

    protected override async Task OnInitializedAsync()
    {
       await GetAllClients();
       await GetAllContacts();

    }

    public async Task GetAllClients(Navigate? navigate = null)
    {
        try
        {
            var listParams = new ClientsDataAccessLib.Utilities.ListParameters();
            switch (navigate)
            {
                case Navigate.Next:
                    PageNumber++;
                    break;

                case Navigate.Previous:
                    if (PageNumber > 0)
                    {
                        PageNumber--;
                    }
                    break;
                default:
                    PageNumber = 1;
                    break;

            }

            listParams.PageNumber = PageNumber == 0 ? 1 : PageNumber;
            clients = await Task.Run(() => clientService.GetAllClientsAsync(listParams));
           
            StateHasChanged();
        }
        catch (DatabaseOperationException ex)
        {
           await js.InvokeVoidAsync("alert", ex.Message);
        }
    }

    public async Task GetAllContacts()
    {
        try
        {
            var listParams = new ClientsDataAccessLib.Utilities.ListParameters();
            contacts = await Task.Run(() => contactService.GetAllContacts(listParams));
            StateHasChanged();
        }
        catch (DatabaseOperationException ex)
        {
            await js.InvokeVoidAsync("alert", ex.Message);
        }
    }
}
