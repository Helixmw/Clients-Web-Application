@using ClientsAppUI.Models
@using ClientsDataAccessLib.DTOs.Clients
@using ClientsDataAccessLib.DTOs.Contacts
@using ClientsDataAccessLib.Exceptions
@using ClientsDataAccessLib.Services
@inject IJSRuntime js
@inject IClientService clientService



@if(Clients is not null){
    <div class="card card-table">
        <h3>All Clients</h3>
        <small>Browse through all clients and make changes</small>

        <table class="table" id="clientsTable">
            <thead>
                <tr>

                    <th scope="col">Name</th>
                    <th scope="col">Code</th>
                    <th scope="col">Total Contacts</th>
                    <th scope="col">&nbsp;</th>
                </tr>
            </thead>
            <tbody>

                @foreach(var client in Clients)
                {
                    <tr>
                        <td>@client.Name</td>
                        <td>@client.Code</td>
                        <td>@client.TotalContacts</td>
                        <td class="button-controls">
                            <div class="table-buttons">
                                <button type="button" class="btn btn-primary btn-sm" data-bs-toggle="modal" data-bs-target="#exampleModal" @onclick="() => SetSelectedClient(client)">Link Contact</button>
                                <button type="button" class="btn btn-danger btn-sm" data-bs-toggle="modal" data-bs-target="#deleteModal" @onclick="() => SetSelectedClient(client)">Delete</button>
                            </div> 

                        </td>
                    </tr>
                }


            </tbody>
        </table>
    </div>
}


<!-- Link Contact Modal -->
<div class="modal fade" id="exampleModal" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <EditForm Model="@clientContact">
                <div class="modal-header">
                    <h5 class="modal-title" id="exampleModalLabel">Link Contact To Client</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    @if(Contacts is not null){
                        <h4>@selectedClient.Name</h4>

                        <div class="form-floating">
                            <select class="form-select" id="floatingSelect"
                            @bind="clientContact.ContactId"
                            aria-label="Select contact information to link to this client.">
                                @* <option selected>Open this select menu</option> *@
                                <option value="@Guid.Empty" selected>Please select a contact</option>
                                @foreach (var contact in Contacts)
                                {
                                    <option value="@contact.ContactId">@contact.Name @contact.Surname (@contact.Email)</option>
                                }

                            </select>
                            <label for="floatingSelect">Select a contact to link this client.</label>
                        </div>

                    }
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                    <button type="button" class="btn btn-primary" @onclick="() => LinkContactToClient()">Link Contact</button>
                </div>
            </EditForm>
        </div>
    </div>
</div>

<!-- Delete Modal -->
<div class="modal fade" id="deleteModal" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h1 class="modal-title fs-5" id="exampleModalLabel">Delete Client</h1>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <h4 class="text-danger fw-bold">@selectedClient.Name</h4>
                <span class="text-danger fw-bold">Are you sure you want to delete this client? This action cannot be undone.</span>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-outline-danger" data-bs-dismiss="modal">No</button>

                <button type="button" class="btn btn-danger" data-bs-dismiss="modal" @onclick="() => DeleteSelectedClient()">Yes</button>

            </div>
        </div>
    </div>
</div>






@code {
    [Parameter]
    public IEnumerable<GetClientDTO>? Clients { get; set; }

    [Parameter]
    public IEnumerable<GetContactDTO>? Contacts { get; set; }

    [Parameter]
    public Action GetAllClients { get; set; } = null!;

    private ClientContact clientContact { get; set; } = new();

    private GetClientDTO selectedClient { get; set; } = new();

    private void SetSelectedClient(GetClientDTO getClientDTO)
    {
        selectedClient = getClientDTO;
    }

    private async Task LinkContactToClient()
    {
        try
        {
            if (clientContact.ContactId == Guid.Empty)
            {
                await js.InvokeVoidAsync("alert", "Please select a contact to be linked");
            }
            else
            {           
                clientContact.ClientId = selectedClient.ClientId;
                var isLinked = await clientService.LinkContactToClientAsync(clientContact.ClientId, clientContact.ContactId);
                GetAllClients();
                if (isLinked)
                    await js.InvokeVoidAsync("alert", $"This contact has been linked to {selectedClient.Name}");

                else
                    await js.InvokeVoidAsync("alert", $"This contact was already linked to {selectedClient.Name} and therefore has been unlinked.");
            }

        }catch(DatabaseOperationException ex)
        {
            await js.InvokeVoidAsync("alert", ex.Message);
        }

    }

    private async Task DeleteSelectedClient()
    {
        try
        {
            await clientService.DeleteClientAsync(selectedClient.ClientId);
            GetAllClients();
        }catch(DatabaseOperationException ex)
        {
            await js.InvokeVoidAsync("alert", ex.Message);
        }
    }

    // protected override async Task OnAfterRenderAsync(bool firstRender)
    // {
    //     if (firstRender)
    //     {
    //        await js.InvokeVoidAsync("initializeDataTable");
    //     }
    // }
}
