@using ClientsAppUI.Enums
@using ClientsAppUI.Models
@using ClientsDataAccessLib.DTOs.Clients
@using ClientsDataAccessLib.DTOs.Contacts
@using ClientsDataAccessLib.Exceptions
@using ClientsDataAccessLib.Services
@inject IJSRuntime js
@inject IClientService clientService
@inject IContactService contactService



@if(Clients is not null){
    @if(Clients.Count() > 0){
        <div class="card card-table">
            <h3>All Clients</h3>
            <small>Browse through all clients and make changes</small>

            <table class="table" id="clientsTable">
                <thead>
                    <tr>

                        <th scope="col">Name</th>
                        <th scope="col">Code</th>
                        @* <th scope="col">Total Contacts</th> *@
                        <th scope="col">&nbsp;</th>
                        <th scope="col">&nbsp;</th>
                    </tr>
                </thead>
                <tbody>

                    @foreach(var client in Clients)
                    {
                        <tr>
                            <td title="Client Name">@client.Name</td>
                            <td title="Client Code">@client.Code</td>
                            <td>
                                <button type="button" title="Linked contacts" class="btn btn-light btn-sm"
                                @onclick="() => SetSelectedClient(client, QueryType.WithContacts)"
                                data-bs-toggle="modal" data-bs-target="#viewContactsModal">
                                    Contacts &nbsp;<span class="badge bg-success">
                                        @client.TotalContacts
                                    </span>
                                </button>
                            </td>
                            @* <td>@client.TotalContacts</td> *@
                            <td class="button-controls">
                                <div class="table-buttons">
                                    <button type="button" title="Edit Client" class="btn btn-outline-primary btn-sm" data-bs-toggle="modal" data-bs-target="#editClientModal" @onclick="() => SetSelectedClient(client, QueryType.WithoutContacts)">Edit</button>
                                    <button type="button" title="Link contacts to this client" class="btn btn-primary btn-sm" data-bs-toggle="modal" data-bs-target="#exampleModal" @onclick="() => SetSelectedClient(client, QueryType.WithoutContacts)">Link Contact</button>
                                    <button type="button" title="Delete Client" class="btn btn-danger btn-sm" data-bs-toggle="modal" data-bs-target="#deleteModal" @onclick="() => SetSelectedClient(client, QueryType.WithoutContacts)">Delete</button>
                                </div> 

                            </td>
                        </tr>
                    }


                </tbody>
            </table>
            <div class="btn-group btn-group-sm w-25 align-self-center nav-buttons" role="group" aria-label="Basic mixed styles example">
                <button type="button" class="btn btn-outline-primary" @onclick="() => GetAllClients(Navigate.Previous)">Previous</button>
                <button type="button" class="btn btn-outline-primary" @onclick="() => GetAllClients(Navigate.Next)">Next</button>
            </div>
        </div>
    }
    else
    {
        <p class="fs-4 text-secondary">No Clients Found. Create One</p>
    }
}
else
{
    <p class="fs-4 text-secondary">Loading table. Please wait...</p>

}


<!-- Edit Modal -->
<div class="modal fade" id="editClientModal" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <EditForm Model="@clientContact" OnValidSubmit="UpdateClient">

                <div class="modal-header">
                    <h5 class="modal-title" id="exampleModalLabel">Edit Client</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">

                    <h4>@selectedClient.Name</h4>
                    <h6 class="text-secondary">@selectedClient.Code</h6>

                    <div class="mb-3">
                        <label for="Name" class="form-label">Client Name*</label>
                        <InputText class="form-control" id="name" Placeholder="Enter Client Name" @bind-Value="selectedClient.Name" />
                    </div>


                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                    <button type="submit" class="btn btn-primary">Save Changes</button>
                </div>
            </EditForm>
        </div>
    </div>
</div>


<!-- Link Contact Modal -->
<div class="modal fade" id="exampleModal" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <EditForm Model="@clientContact">
                <div class="modal-header">
                    <h5 class="modal-title" id="exampleModalLabel">Link Contact To Client</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    @if(Contacts is not null){
                        <h4>@selectedClient.Name</h4>
                        <h6 class="text-secondary">@selectedClient.Code</h6>

                        <div class="form-floating">
                            <select class="form-select" id="floatingSelect"
                            @bind="clientContact.ContactId"
                            aria-label="Select contact information to link to this client.">
                                @* <option selected>Open this select menu</option> *@
                                <option value="@Guid.Empty" selected>Please select a contact</option>
                                @foreach (var contact in Contacts)
                                {
                                    <option value="@contact.ContactId">@contact.Name @contact.Surname (@contact.Email)</option>
                                }

                            </select>
                            <label for="floatingSelect">Select a contact to link this client.</label>
                        </div>

                    }
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                    <button type="button" class="btn btn-primary" @onclick="() => LinkContactToClient()">Link Contact</button>
                </div>
            </EditForm>
        </div>
    </div>
</div>

<!-- Delete Modal -->
<div class="modal fade" id="deleteModal" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h1 class="modal-title fs-5" id="exampleModalLabel">Delete Client</h1>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <h4 class="text-danger fw-bold">@selectedClient.Name</h4>
                <span class="text-danger fw-bold">@selectedClient.Code</span>
                <br/>


                <span class="text-danger fw-bold delete-code">Are you sure you want to delete this client? This action cannot be undone and unlinks this client's contacts.</span>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-outline-danger" data-bs-dismiss="modal">No</button>

                <button type="button" class="btn btn-danger" data-bs-dismiss="modal" @onclick="() => DeleteSelectedClient()">Yes</button>

            </div>
        </div>
    </div>
</div>

<!-- View Linked Contacts Modal -->
<div class="modal fade" id="viewContactsModal" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h1 class="modal-title fs-5" id="exampleModalLabel">Linked Contacts</h1>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                @if (Contacts is not null)
                {
                    <h4>@selectedClient.Name</h4>
                    <h6 class="text-secondary">@selectedClient.Code</h6>

                    @if (ClientContacts?.Count > 0)
                    {
                        <div class="contact-list">
                            <ol class="list-group list-group-numbered">

                                @foreach(var contact in ClientContacts)
                                {
                                    <li class="list-group-item d-flex justify-content-between align-items-start">
                                        <div class="ms-2 me-auto">
                                            <div class="fw-bold">@contact.Name @contact.Surname</div>
                                            @contact.Email
                                        </div>
                                        <span class="badge bg-primary rounded-pill contact-badge">@contact.TotalClients</span>
                                    </li>

                                }




                            </ol>
                        </div>
                    }
                    else
                    {
                        <p class="fs-5 align-self-center mt-4 text-primary">No Linked Contacts</p>

                    }


                }
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-primary" data-bs-dismiss="modal">Close</button>             
            </div>
        </div>
    </div>
</div>






@code {
    [Parameter]
    public IEnumerable<GetClientDTO>? Clients { get; set; }

    [Parameter]
    public IEnumerable<GetContactDTO>? Contacts { get; set; }

    public int PageNumber { get; set; } = 1;

    [Parameter]
    public Func<Navigate?, Task> GetAllClients { get; set; } = null!;

    private ClientContact clientContact { get; set; } = new();

    private GetClientDTO selectedClient { get; set; } = new();

    private List<GetContactDTO>? ClientContacts { get; set; }

    private void SetSelectedClient(GetClientDTO getClientDTO, QueryType queryType)
    {
        switch (queryType)
        {
            case QueryType.WithContacts:

                ClientContacts = (List<GetContactDTO>) contactService.GetAllContactsByClientId(getClientDTO.ClientId);
                selectedClient = getClientDTO;
                break;
            case QueryType.WithoutContacts:
                selectedClient = getClientDTO;
                break;
        }
        selectedClient = getClientDTO;
    }

    private async Task LinkContactToClient()
    {
        try
        {
            if (clientContact.ContactId == Guid.Empty)
            {
                await js.InvokeVoidAsync("alert", "Please select a contact to be linked");
            }
            else
            {           
                clientContact.ClientId = selectedClient.ClientId;
                var isLinked = await clientService.LinkContactToClientAsync(clientContact.ClientId, clientContact.ContactId);
                await GetAllClients(null);
                if (isLinked)
                    await js.InvokeVoidAsync("alert", $"This contact has been linked to {selectedClient.Name}");

                else
                    await js.InvokeVoidAsync("alert", $"This contact was already linked to {selectedClient.Name} and therefore has been unlinked.");
            }

        }catch(DatabaseOperationException ex)
        {
            await js.InvokeVoidAsync("alert", ex.Message);
        }

    }

    private async Task DeleteSelectedClient()
    {
        try
        {
            await clientService.DeleteClientAsync(selectedClient.ClientId);
            await GetAllClients(null);
        }catch(DatabaseOperationException ex)
        {
            await js.InvokeVoidAsync("alert", ex.Message);
        }
    }

    private async Task UpdateClient()
    {
        try
        {
            if(selectedClient.Name.Trim() == String.Empty)
            {
                await js.InvokeVoidAsync("alert", "A client name cannot be empty.");
            }
            else
            {
                var client = new UpdateClientDTO
                    {
                        ClientId = selectedClient.ClientId,
                        Name = selectedClient.Name,
                        Code = selectedClient.Code
                    };
                await clientService.UpdateClientAsync(client);
            }
            await GetAllClients(null);
            await js.InvokeVoidAsync("bootstrapInterop.closeModal", "#editClientModal");              

        }catch(DatabaseOperationException ex)
        {
            await js.InvokeVoidAsync("alert", ex.Message);
        }
    }

    
}
